c
params
c
params
c
@image = RubySvgImageGenerator.create_random("random_image", :theme => theme)
n
c
reload
params
 theme = params[:class_theme]
theme
params[:parts]
exit
 parts = params[:parts].collect {|part| part[1].to_i}
parts
c
reload
theme
c
RubySvgImageGenerator.create "test_image", :theme => :HumanAvatars, :parts => parts
theme
RubySvgImageGenerator.create "test_image", :theme => theme, :parts => parts
parts
n
parts
RubySvgImageGenerator.create "test_image", :theme => theme, :parts => parts
 params[:parts].collect {|part| part[1].to_i}
c
reload
params[:parts].collect {|part| part[1].to_i}
params[:parts]
params
parts
c
reload
theme_inst.first
theme_inst
c
cc
theme_inst
n
theme_inst
c
parts = [0,1,2,0,0]
parts
n
c
params['class_theme']
@image = RubySvgImageGenerator.create("test", :theme => params['class_theme'], :parts => parts)
@image = RubySvgImageGenerator.create("test", :theme => params['class_theme'], :parts => parts
 parts = params[:parts].collect {|c| c[1].to_i}
params[:parts]
c
reload
params[:parts].collect {|c| c[1].to_i}
params[:parts].collect {|c| c[1]}
params[:parts].collect {|c| c}
params[:parts].collect {|c| c.value}
params[:parts]
params[:parts].class
params[:parts]
params
quit
exit
params[:parts]
RubySvgImageGenerator.const_get(params[:class_theme])
RubySvgImageGenerator.const_get(options[:theme])
params['class_theme']
arams['class_theme']
c
reload
part.count
part
c
reload
theme.each {|p| puts p}
theme.each
theme.all
c
reload
c
reload
parts = RubySvgImageGenerator::FaceAvatars.new.merge_parts(parts)
RubySvgImageGenerator::FaceAvatars.new.merge_parts(parts)
RubySvgImageGenerator::FaceAvatars.new
params
c
@image
c
 RubyMatrixToSvg.matrix_to_svg('test', parts)
 matrix_image = RubySvgImageGenerator::Theme.new('test',0,0).merge_parts(parts)
matrix_image
c
reload
RubySvgImageGenerator::Theme.new
theme = RubySvgImageGenerator::Theme.new
parts.count
parts
c
reload
RubySvgImageGenerator::Theme.new.merge_parts([])
RubySvgImageGenerator::Theme.merge_parts([])
RubySvgImageGenerator::Theme.merge_parts
RubySvgImageGenerator::Theme
RubySvgImageGenerator
c
reload
class_part.get_matrix(part[1].to_i)
part[1]
class_part.get_matrix(part[1])
class_part
n
reload
c
reload
params[:parts].each { |part| puts part[0].constantize}
params[:parts].each { |part| puts part[0]}
params[:parts].each { |part| puts part}
params[:parts].each { |part| puts part.first[0].constantize}
params[:parts].each { |part| puts part.first[0]}
exception
n
params[:parts]
paras[:parts]
c
exit
params[:part].first[0]
params[:part].first
params[:part].count
params[:part][0]
params[:part]
params
c
params
c
part.get_matrix 5
part.get_matrix 0
part.get_matrix 1
part.get_matrix 0
part.get_random_matrix
part.get_random_matriz
part =RubySvgImageGenerator::FaceAvatars::Background.new
RubySvgImageGenerator::FaceAvatars::Background.new.count
RubySvgImageGenerator::FaceAvatars::Background.new
theme.parts.first.class
theme.parts.first
c
params
c
theme.parts
n
c
@parts.first.count
@parts.first.name
@parts.first
@parts
n
c
gst
theme.parts
n
 theme = "RubySvgImageGenerator::#{name_theme}".constantize.new
exit
theme.name
theme.parts
theme = "RubySvgImageGenerator::#{name}".constantize.new
"RubySvgImageGenerator::#{name}".constantize.new
"RubySvgImageGenerator::#{name}".constantize
"RubySvgImageGenerator::#{name}".constantice
"RubySvgImageGenerator::#{name}".send('new')
"RubySvgImageGenerator::#{name}"
name.constantize
name = params[:theme]
params[:theme]
theme.each {|p| puts p.name}
theme
theme = RubySvgImageGenerator::FaceAvatars.new
RubySvgImageGenerator::FaceAvatars.new
RubySvgImageGenerator::FaceAvatars.parts
RubySvgImageGenerator::FaceAvatars
RubySvgImageGenerator;;FaceAvatars
FaceAvatars
params
c
options_for_select([])
RubySvgImageGenerator::THEMES
exit
RubySvgImageGenerator.constants
RubySvgImageGenerator::Themes
RubySvgImageGenerator
.~
c
 @image = RubySvgImageGenerator.create "test", :theme => RubySvgImageGenerator::T_HUMAN_AVATARS
